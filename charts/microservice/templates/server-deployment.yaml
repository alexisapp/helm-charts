{{ if .Values.server.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-server-deployment"
  labels:
    chart: '{{ .Release.Name }}-{{ .Chart.Version | replace "+" "_" }}'
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: {{ .Values.server.strategy.type }}
{{ if eq .Values.server.strategy.type "RollingUpdate" }}
    rollingUpdate:
      maxUnavailable: {{ .Values.server.strategy.rollingUpdate.maxUnavailable }}
      maxSurge: {{ .Values.server.strategy.rollingUpdate.maxSurge }}
{{ end }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  selector:
    matchLabels:
      app: "{{ .Release.Name }}-server-selector"
  template:
    metadata:
      labels:
        app: "{{  .Release.Name }}-server-selector"
        app.kubernetes.io/processType: server
      annotations:
        checksum/config: {{ tpl (toYaml .Values.config) . | sha256sum }}
        checksum/secrets: {{ tpl (toYaml .Values.secrets) . | sha256sum }}
    spec:
      nodeSelector:
        env: "{{ .Values.environment }}"
      containers:
      - name: "{{ .Release.Name  }}"
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
          - "/bin/bash"
          - "-c"
        args:
          - "{{ .Values.server.command }}"
        {{ if .Values.volumeMounts }}
        volumeMounts:
{{ toYaml .Values.volumeMounts | indent 10 }}
        {{ end }}
        ports:
        - containerPort: {{ .Values.containerPort}}
        resources:
          limits:
            cpu: "{{ .Values.server.resources.limits.cpu }}"
            memory: "{{ .Values.server.resources.limits.memory }}"
          requests:
            cpu: "{{ .Values.server.resources.requests.cpu }}"
            memory: "{{ .Values.server.resources.requests.memory }}"
        env:
          - name: PORT
            value : "{{ .Values.containerPort }}"
          - name: PROCESS_TYPE
            value : "server"
        envFrom:
          - configMapRef:
              name: "{{ .Release.Name }}-env-config"
          - secretRef:
              name: "{{ .Release.Name }}-env-secrets"
        {{- if .Values.image.livenessProbe }}
        livenessProbe:
{{ toYaml .Values.image.livenessProbe | indent 10 }}
        {{- end }}
        {{- if .Values.image.readinessProbe }}
        readinessProbe:
{{ toYaml .Values.image.readinessProbe | indent 10 }}
        {{- end }}
      {{- if .Values.volumes }}
      volumes:
{{ toYaml .Values.volumes | indent 10 }}
      {{- end }}
{{ end }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{  .Release.Name }}-env-config"
data:
{{ toYaml .Values.config | indent 2 }}

---
apiVersion: v1
kind: Secret
metadata:
  name: "{{ .Release.Name }}-env-secrets"
type: Opaque
data:
{{ toYaml .Values.secrets | indent 2 }}

---
